             DataStructres
         *********************
         
Time Complexity
-------------------
1)Its amount of time taken by algorithm run
2)the input processed by an algorithm helps determine time complexity

      
Space Complexity
-------------------
it amount of memory space taken by algorithm to run
the memory requires to process the input by an algorithm helps determine space complexity


Asymptotic Analysis Of An Algorithm
-------------------------------------    
Asymptotic analysis helps in evaluating performance of an algorithm in terms 
of input size and its increase.
Using asymptotic analysis we dont measure actual running time of an algorithm.
It helps in determining how time and space taken by algorithm increase with input size.

AsymptoticNotation
-------------------
Asymptotic notation are the mathematical tools used to describe the running time of an algorithm
in  terms of input size.

Asymptotic notation determine
------------------------------
1)Best case
2)Average Case
3)Worst Case

Types of Asymptotic Notation
-----------------------------
1)Omega Notation(best case)

2)Big O notation(worst case)

3)Theta Notation(average case)

Omega Notaion:
-----------------
1)The formal way to express lower bound of an algorithm run time.
2)Lower bound means for any given input this notation determines best
amount of time an algorithm can take to complete.


Big O Notation
---------------
The formal way to express upper bound of an algorithm run time.
2)Upper bound means for any given input this notation determines Longest
amount of time an algorithm can take to complete. 

Theta Notation
---------------
The formal way to express lower bound and Upper bound of an algorithm run time.
2)Lower bound and Upper bound means for any given input this notation determines average
amount of time an algorithm can take to complete.


Analysis of Time Complexity(Big O Notation)
---------------------------------------------
Rules of Big O notation:
===========================
1)It single processor
2)It perform sequential execution of statement
3)Assignment operation take 1 unit of time
4)Return statement takes 1 unit of time
5)Arithmetical operation take 1 unit of time
6)Logical operation takes 1 unit of time
7)other small/single operation take 1 unit of time
8)Drop lower order terms(O(n2))
9)Drop constant multipliers(O(n2))

Calculating TimeComplexity of Constant algorithm
--------------------------------------------------
public int sum(int x, int y){
  int result=x+y; 1+1+1+1=4 unit
  return result; 1+1 =2unit
  
 T==6 notation is(O(1))
 
Calculating TimeComplexity of Linear algorithm
------------------------------------------------
public void findSum(int n){
  int sum=0; 1= 1unit
  for(int i=1;i<=n;i++){  1+3(n+1)+3n =6n+4 units
    sum=sum+i; n(1+1+1)= 4n units
    }
   return sum;1+1 =2 units
 }  
 
 t=10n+7 notation is (O(n))
 t=n
 
Calculating TimeComplexity of Polynomial algorithm 
-------------------------------------------------------
public void print(int n){
  for(int i=1;i<=n;i++){ 1+3(n+1)+3n= 6n+4units
     for(int j=1;j<=n;j++){ n(1+3(n+1)+3n=) 6n^2+4n units
      sop("i"+i+"j"+j); n2(1+1+1) =3n^2 units
      }
      sop("End of inloop");n(1) =n units
      }
      sop("End of out loop"); 1= 1units
}

t=6n+4+6n^2+4n+3n^2+n+1;
T=n^2  notation is(O(n2))

============================================================================================================================
Singly LinkedList
--------------------
Singly linked list is  data structure used for storing collection of nodes
and following properties

1)It contains sequence nodes
2)A  node has data and reference to next node in list
3)First node is head node
4)Last node has data and points to null

 
create Singly linkedList
----------------------------
head=new ListNode(10);
ListNode  second=new ListNode(1);
ListNode third=new ListNode(8);
List Node fourth=new ListNode(11);
head.next=second;
sencod.next=third;
third.next=fourth;


print List element 
-------------------
ListNode current=head;
while(current!=null)
 syso(current.data+" --> ");
 current=current.next;
 }
 syso("null");
 
 
find length of list
---------------------
int count=0;
ListNode current=head;
while(current!=null)
  count++;
  current =current.next; 
 }
 return count;

 insert node at begginning list
 --------------------------------
 ListNode newNode=new ListNode(13);
 newNode=head;
 head=newNode;
 
 insert node at end of list
 -----------------------------
 ListNode newNode=new ListNode(value);
 if(head==null){
   head=newNode;
   return;
 }
 ListNode current=head;
 while(null!=current.next){
   current=current.next;
  } 
  current.next=newNode;
   




















BinaryTree
------------
1)Hierarchical Data Structure
2)Top most element as root of tree
3)Every node can have most 2 child in binary tree
4)can't access element randomly using index
5)common traversal methods:
   preorder:node-left-right
   Postorder:left-right-node
   inorder:left-node-right

   

 